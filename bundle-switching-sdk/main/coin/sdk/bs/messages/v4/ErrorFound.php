<?php
/**
 * ErrorFound
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * COIN Bundle Switching Rest API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * Contact: servicedesk@coin.nl
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.14
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace coin\sdk\bs\messages\v4;

use \ArrayAccess;
use InvalidArgumentException;
use coin\sdk\bs\ObjectSerializer;

/**
 * ErrorFound Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ErrorFound implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ErrorFound';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'dossierid' => 'string',
        'messagetype' => 'string',
        'messageid' => 'string',
        'originalmessage' => 'string',
        'errorlog' => 'string',
        'repeats' => '\coin\sdk\bs\messages\v4\ErrorFoundRepeats[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'dossierid' => null,
        'messagetype' => null,
        'messageid' => null,
        'originalmessage' => null,
        'errorlog' => null,
        'repeats' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'dossierid' => 'dossierid',
        'messagetype' => 'messagetype',
        'messageid' => 'messageid',
        'originalmessage' => 'originalmessage',
        'errorlog' => 'errorlog',
        'repeats' => 'repeats'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'dossierid' => 'setDossierid',
        'messagetype' => 'setMessagetype',
        'messageid' => 'setMessageid',
        'originalmessage' => 'setOriginalmessage',
        'errorlog' => 'setErrorlog',
        'repeats' => 'setRepeats'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'dossierid' => 'getDossierid',
        'messagetype' => 'getMessagetype',
        'messageid' => 'getMessageid',
        'originalmessage' => 'getOriginalmessage',
        'errorlog' => 'getErrorlog',
        'repeats' => 'getRepeats'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['dossierid'] = isset($data['dossierid']) ? $data['dossierid'] : null;
        $this->container['messagetype'] = isset($data['messagetype']) ? $data['messagetype'] : null;
        $this->container['messageid'] = isset($data['messageid']) ? $data['messageid'] : null;
        $this->container['originalmessage'] = isset($data['originalmessage']) ? $data['originalmessage'] : null;
        $this->container['errorlog'] = isset($data['errorlog']) ? $data['errorlog'] : null;
        $this->container['repeats'] = isset($data['repeats']) ? $data['repeats'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['dossierid'] === null) {
            $invalidProperties[] = "'dossierid' can't be null";
        }
        if ((mb_strlen($this->container['dossierid']) > 40)) {
            $invalidProperties[] = "invalid value for 'dossierid', the character length must be smaller than or equal to 40.";
        }

        if ((mb_strlen($this->container['dossierid']) < 8)) {
            $invalidProperties[] = "invalid value for 'dossierid', the character length must be bigger than or equal to 8.";
        }

        if (!preg_match("/^[A-Z0-9]{1,6}-[A-Z0-9]{1,6}-[A-Za-z0-9]{1,22}-[0-9]{1,3}$/", $this->container['dossierid'])) {
            $invalidProperties[] = "invalid value for 'dossierid', must be conform to the pattern /^[A-Z0-9]{1,6}-[A-Z0-9]{1,6}-[A-Za-z0-9]{1,22}-[0-9]{1,3}$/.";
        }

        if (!is_null($this->container['messagetype']) && !preg_match("/contractterminationrequest|contractterminationrequestanswer|contractterminationperformed|cancel/", $this->container['messagetype'])) {
            $invalidProperties[] = "invalid value for 'messagetype', must be conform to the pattern /contractterminationrequest|contractterminationrequestanswer|contractterminationperformed|cancel/.";
        }

        if (!is_null($this->container['messageid']) && (mb_strlen($this->container['messageid']) > 26)) {
            $invalidProperties[] = "invalid value for 'messageid', the character length must be smaller than or equal to 26.";
        }

        if (!is_null($this->container['messageid']) && (mb_strlen($this->container['messageid']) < 0)) {
            $invalidProperties[] = "invalid value for 'messageid', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['repeats'] === null) {
            $invalidProperties[] = "'repeats' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets dossierid
     *
     * @return string
     */
    public function getDossierid()
    {
        return $this->container['dossierid'];
    }

    /**
     * Sets dossierid
     *
     * @param string $dossierid The identifier for the Contract Termination Request determined by the Recipient for communication between the Recipient and Donor. Defined as [RecipientSPCode]-[DonorSPCode]-[Identifier] The requirement is that the dossierid is unique and identifies the contract termination request.
     *
     * @return $this
     */
    public function setDossierid($dossierid)
    {
        if ((mb_strlen($dossierid) > 40)) {
            throw new InvalidArgumentException('invalid length for $dossierid when calling ErrorFound., must be smaller than or equal to 40.');
        }
        if ((mb_strlen($dossierid) < 8)) {
            throw new InvalidArgumentException('invalid length for $dossierid when calling ErrorFound., must be bigger than or equal to 8.');
        }
        if ((!preg_match("/^[A-Z0-9]{1,6}-[A-Z0-9]{1,6}-[A-Za-z0-9]{1,22}-[0-9]{1,3}$/", $dossierid))) {
            throw new InvalidArgumentException("invalid value for $dossierid when calling ErrorFound., must conform to the pattern /^[A-Z0-9]{1,6}-[A-Z0-9]{1,6}-[A-Za-z0-9]{1,22}-[0-9]{1,3}$/.");
        }

        $this->container['dossierid'] = $dossierid;

        return $this;
    }

    /**
     * Gets messagetype
     *
     * @return string
     */
    public function getMessagetype()
    {
        return $this->container['messagetype'];
    }

    /**
     * Sets messagetype
     *
     * @param string $messagetype The message type of the message in which one or more errors have been found.
     *
     * @return $this
     */
    public function setMessagetype($messagetype)
    {

        if (!is_null($messagetype) && (!preg_match("/contractterminationrequest|contractterminationrequestanswer|contractterminationperformed|cancel/", $messagetype))) {
            throw new InvalidArgumentException("invalid value for $messagetype when calling ErrorFound., must conform to the pattern /contractterminationrequest|contractterminationrequestanswer|contractterminationperformed|cancel/.");
        }

        $this->container['messagetype'] = $messagetype;

        return $this;
    }

    /**
     * Gets messageid
     *
     * @return string
     */
    public function getMessageid()
    {
        return $this->container['messageid'];
    }

    /**
     * Sets messageid
     *
     * @param string $messageid The unique technical id of the message in which one or more errors have been found
     *
     * @return $this
     */
    public function setMessageid($messageid)
    {
        if (!is_null($messageid) && (mb_strlen($messageid) > 26)) {
            throw new InvalidArgumentException('invalid length for $messageid when calling ErrorFound., must be smaller than or equal to 26.');
        }
        if (!is_null($messageid) && (mb_strlen($messageid) < 0)) {
            throw new InvalidArgumentException('invalid length for $messageid when calling ErrorFound., must be bigger than or equal to 0.');
        }

        $this->container['messageid'] = $messageid;

        return $this;
    }

    /**
     * Gets originalmessage
     *
     * @return string
     */
    public function getOriginalmessage()
    {
        return $this->container['originalmessage'];
    }

    /**
     * Sets originalmessage
     *
     * @param string $originalmessage The processed message in which one or more errors have been found.
     *
     * @return $this
     */
    public function setOriginalmessage($originalmessage)
    {
        $this->container['originalmessage'] = $originalmessage;

        return $this;
    }

    /**
     * Gets errorlog
     *
     * @return string
     */
    public function getErrorlog()
    {
        return $this->container['errorlog'];
    }

    /**
     * Sets errorlog
     *
     * @param string $errorlog A log of errors that has been found when processing the message.
     *
     * @return $this
     */
    public function setErrorlog($errorlog)
    {
        $this->container['errorlog'] = $errorlog;

        return $this;
    }

    /**
     * Gets repeats
     *
     * @return ErrorFoundRepeats[]
     */
    public function getRepeats()
    {
        return $this->container['repeats'];
    }

    /**
     * Sets repeats
     *
     * @param ErrorFoundRepeats[] $repeats repeats
     *
     * @return $this
     */
    public function setRepeats($repeats)
    {
        $this->container['repeats'] = $repeats;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



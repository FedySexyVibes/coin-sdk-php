<?php
/**
 * EnumProfileActivation
 *
 * PHP version 5
 *
 * @category Class
 * @package  coin\sdk\np\messages\v3
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * COIN Number Portability API V3
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0.0
 * Contact: servicedesk@coin.nl
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.25
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace coin\sdk\np\messages\v3\model;

use \ArrayAccess;
use \coin\sdk\np\messages\v3\ObjectSerializer;

/**
 * EnumProfileActivation Class Doc Comment
 *
 * @category Class
 * @package  coin\sdk\np\messages\v3
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EnumProfileActivation implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'EnumProfileActivation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'dossierid' => 'string',
'currentnetworkoperator' => 'string',
'typeofnumber' => 'string',
'scope' => 'string',
'profileid' => 'string',
'ttl' => 'string',
'dnsclass' => 'string',
'rectype' => 'string',
'order' => 'string',
'preference' => 'string',
'flags' => 'string',
'enumservice' => 'string',
'regexp' => 'string',
'usertag' => 'string',
'domain' => 'string',
'spcode' => 'string',
'processtype' => 'string',
'gateway' => 'string',
'service' => 'string',
'domaintag' => 'string',
'replacement' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'dossierid' => null,
'currentnetworkoperator' => null,
'typeofnumber' => null,
'scope' => null,
'profileid' => null,
'ttl' => null,
'dnsclass' => null,
'rectype' => null,
'order' => null,
'preference' => null,
'flags' => null,
'enumservice' => null,
'regexp' => null,
'usertag' => null,
'domain' => null,
'spcode' => null,
'processtype' => null,
'gateway' => null,
'service' => null,
'domaintag' => null,
'replacement' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'dossierid' => 'dossierid',
'currentnetworkoperator' => 'currentnetworkoperator',
'typeofnumber' => 'typeofnumber',
'scope' => 'scope',
'profileid' => 'profileid',
'ttl' => 'ttl',
'dnsclass' => 'dnsclass',
'rectype' => 'rectype',
'order' => 'order',
'preference' => 'preference',
'flags' => 'flags',
'enumservice' => 'enumservice',
'regexp' => 'regexp',
'usertag' => 'usertag',
'domain' => 'domain',
'spcode' => 'spcode',
'processtype' => 'processtype',
'gateway' => 'gateway',
'service' => 'service',
'domaintag' => 'domaintag',
'replacement' => 'replacement'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'dossierid' => 'setDossierid',
'currentnetworkoperator' => 'setCurrentnetworkoperator',
'typeofnumber' => 'setTypeofnumber',
'scope' => 'setScope',
'profileid' => 'setProfileid',
'ttl' => 'setTtl',
'dnsclass' => 'setDnsclass',
'rectype' => 'setRectype',
'order' => 'setOrder',
'preference' => 'setPreference',
'flags' => 'setFlags',
'enumservice' => 'setEnumservice',
'regexp' => 'setRegexp',
'usertag' => 'setUsertag',
'domain' => 'setDomain',
'spcode' => 'setSpcode',
'processtype' => 'setProcesstype',
'gateway' => 'setGateway',
'service' => 'setService',
'domaintag' => 'setDomaintag',
'replacement' => 'setReplacement'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'dossierid' => 'getDossierid',
'currentnetworkoperator' => 'getCurrentnetworkoperator',
'typeofnumber' => 'getTypeofnumber',
'scope' => 'getScope',
'profileid' => 'getProfileid',
'ttl' => 'getTtl',
'dnsclass' => 'getDnsclass',
'rectype' => 'getRectype',
'order' => 'getOrder',
'preference' => 'getPreference',
'flags' => 'getFlags',
'enumservice' => 'getEnumservice',
'regexp' => 'getRegexp',
'usertag' => 'getUsertag',
'domain' => 'getDomain',
'spcode' => 'getSpcode',
'processtype' => 'getProcesstype',
'gateway' => 'getGateway',
'service' => 'getService',
'domaintag' => 'getDomaintag',
'replacement' => 'getReplacement'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['dossierid'] = isset($data['dossierid']) ? $data['dossierid'] : null;
        $this->container['currentnetworkoperator'] = isset($data['currentnetworkoperator']) ? $data['currentnetworkoperator'] : null;
        $this->container['typeofnumber'] = isset($data['typeofnumber']) ? $data['typeofnumber'] : null;
        $this->container['scope'] = isset($data['scope']) ? $data['scope'] : null;
        $this->container['profileid'] = isset($data['profileid']) ? $data['profileid'] : null;
        $this->container['ttl'] = isset($data['ttl']) ? $data['ttl'] : null;
        $this->container['dnsclass'] = isset($data['dnsclass']) ? $data['dnsclass'] : null;
        $this->container['rectype'] = isset($data['rectype']) ? $data['rectype'] : null;
        $this->container['order'] = isset($data['order']) ? $data['order'] : null;
        $this->container['preference'] = isset($data['preference']) ? $data['preference'] : null;
        $this->container['flags'] = isset($data['flags']) ? $data['flags'] : null;
        $this->container['enumservice'] = isset($data['enumservice']) ? $data['enumservice'] : null;
        $this->container['regexp'] = isset($data['regexp']) ? $data['regexp'] : null;
        $this->container['usertag'] = isset($data['usertag']) ? $data['usertag'] : null;
        $this->container['domain'] = isset($data['domain']) ? $data['domain'] : null;
        $this->container['spcode'] = isset($data['spcode']) ? $data['spcode'] : null;
        $this->container['processtype'] = isset($data['processtype']) ? $data['processtype'] : null;
        $this->container['gateway'] = isset($data['gateway']) ? $data['gateway'] : null;
        $this->container['service'] = isset($data['service']) ? $data['service'] : null;
        $this->container['domaintag'] = isset($data['domaintag']) ? $data['domaintag'] : null;
        $this->container['replacement'] = isset($data['replacement']) ? $data['replacement'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['dossierid'] === null) {
            $invalidProperties[] = "'dossierid' can't be null";
        }
        if ($this->container['currentnetworkoperator'] === null) {
            $invalidProperties[] = "'currentnetworkoperator' can't be null";
        }
        if ($this->container['typeofnumber'] === null) {
            $invalidProperties[] = "'typeofnumber' can't be null";
        }
        if ($this->container['scope'] === null) {
            $invalidProperties[] = "'scope' can't be null";
        }
        if ($this->container['profileid'] === null) {
            $invalidProperties[] = "'profileid' can't be null";
        }
        if ($this->container['ttl'] === null) {
            $invalidProperties[] = "'ttl' can't be null";
        }
        if ($this->container['dnsclass'] === null) {
            $invalidProperties[] = "'dnsclass' can't be null";
        }
        if ($this->container['rectype'] === null) {
            $invalidProperties[] = "'rectype' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets dossierid
     *
     * @return string
     */
    public function getDossierid()
    {
        return $this->container['dossierid'];
    }

    /**
     * Sets dossierid
     *
     * @param string $dossierid dossierid
     *
     * @return $this
     */
    public function setDossierid($dossierid)
    {
        $this->container['dossierid'] = $dossierid;

        return $this;
    }

    /**
     * Gets currentnetworkoperator
     *
     * @return string
     */
    public function getCurrentnetworkoperator()
    {
        return $this->container['currentnetworkoperator'];
    }

    /**
     * Sets currentnetworkoperator
     *
     * @param string $currentnetworkoperator currentnetworkoperator
     *
     * @return $this
     */
    public function setCurrentnetworkoperator($currentnetworkoperator)
    {
        $this->container['currentnetworkoperator'] = $currentnetworkoperator;

        return $this;
    }

    /**
     * Gets typeofnumber
     *
     * @return string
     */
    public function getTypeofnumber()
    {
        return $this->container['typeofnumber'];
    }

    /**
     * Sets typeofnumber
     *
     * @param string $typeofnumber typeofnumber
     *
     * @return $this
     */
    public function setTypeofnumber($typeofnumber)
    {
        $this->container['typeofnumber'] = $typeofnumber;

        return $this;
    }

    /**
     * Gets scope
     *
     * @return string
     */
    public function getScope()
    {
        return $this->container['scope'];
    }

    /**
     * Sets scope
     *
     * @param string $scope scope
     *
     * @return $this
     */
    public function setScope($scope)
    {
        $this->container['scope'] = $scope;

        return $this;
    }

    /**
     * Gets profileid
     *
     * @return string
     */
    public function getProfileid()
    {
        return $this->container['profileid'];
    }

    /**
     * Sets profileid
     *
     * @param string $profileid profileid
     *
     * @return $this
     */
    public function setProfileid($profileid)
    {
        $this->container['profileid'] = $profileid;

        return $this;
    }

    /**
     * Gets ttl
     *
     * @return string
     */
    public function getTtl()
    {
        return $this->container['ttl'];
    }

    /**
     * Sets ttl
     *
     * @param string $ttl ttl
     *
     * @return $this
     */
    public function setTtl($ttl)
    {
        $this->container['ttl'] = $ttl;

        return $this;
    }

    /**
     * Gets dnsclass
     *
     * @return string
     */
    public function getDnsclass()
    {
        return $this->container['dnsclass'];
    }

    /**
     * Sets dnsclass
     *
     * @param string $dnsclass dnsclass
     *
     * @return $this
     */
    public function setDnsclass($dnsclass)
    {
        $this->container['dnsclass'] = $dnsclass;

        return $this;
    }

    /**
     * Gets rectype
     *
     * @return string
     */
    public function getRectype()
    {
        return $this->container['rectype'];
    }

    /**
     * Sets rectype
     *
     * @param string $rectype rectype
     *
     * @return $this
     */
    public function setRectype($rectype)
    {
        $this->container['rectype'] = $rectype;

        return $this;
    }

    /**
     * Gets order
     *
     * @return string
     */
    public function getOrder()
    {
        return $this->container['order'];
    }

    /**
     * Sets order
     *
     * @param string $order order
     *
     * @return $this
     */
    public function setOrder($order)
    {
        $this->container['order'] = $order;

        return $this;
    }

    /**
     * Gets preference
     *
     * @return string
     */
    public function getPreference()
    {
        return $this->container['preference'];
    }

    /**
     * Sets preference
     *
     * @param string $preference preference
     *
     * @return $this
     */
    public function setPreference($preference)
    {
        $this->container['preference'] = $preference;

        return $this;
    }

    /**
     * Gets flags
     *
     * @return string
     */
    public function getFlags()
    {
        return $this->container['flags'];
    }

    /**
     * Sets flags
     *
     * @param string $flags flags
     *
     * @return $this
     */
    public function setFlags($flags)
    {
        $this->container['flags'] = $flags;

        return $this;
    }

    /**
     * Gets enumservice
     *
     * @return string
     */
    public function getEnumservice()
    {
        return $this->container['enumservice'];
    }

    /**
     * Sets enumservice
     *
     * @param string $enumservice enumservice
     *
     * @return $this
     */
    public function setEnumservice($enumservice)
    {
        $this->container['enumservice'] = $enumservice;

        return $this;
    }

    /**
     * Gets regexp
     *
     * @return string
     */
    public function getRegexp()
    {
        return $this->container['regexp'];
    }

    /**
     * Sets regexp
     *
     * @param string $regexp regexp
     *
     * @return $this
     */
    public function setRegexp($regexp)
    {
        $this->container['regexp'] = $regexp;

        return $this;
    }

    /**
     * Gets usertag
     *
     * @return string
     */
    public function getUsertag()
    {
        return $this->container['usertag'];
    }

    /**
     * Sets usertag
     *
     * @param string $usertag usertag
     *
     * @return $this
     */
    public function setUsertag($usertag)
    {
        $this->container['usertag'] = $usertag;

        return $this;
    }

    /**
     * Gets domain
     *
     * @return string
     */
    public function getDomain()
    {
        return $this->container['domain'];
    }

    /**
     * Sets domain
     *
     * @param string $domain domain
     *
     * @return $this
     */
    public function setDomain($domain)
    {
        $this->container['domain'] = $domain;

        return $this;
    }

    /**
     * Gets spcode
     *
     * @return string
     */
    public function getSpcode()
    {
        return $this->container['spcode'];
    }

    /**
     * Sets spcode
     *
     * @param string $spcode spcode
     *
     * @return $this
     */
    public function setSpcode($spcode)
    {
        $this->container['spcode'] = $spcode;

        return $this;
    }

    /**
     * Gets processtype
     *
     * @return string
     */
    public function getProcesstype()
    {
        return $this->container['processtype'];
    }

    /**
     * Sets processtype
     *
     * @param string $processtype processtype
     *
     * @return $this
     */
    public function setProcesstype($processtype)
    {
        $this->container['processtype'] = $processtype;

        return $this;
    }

    /**
     * Gets gateway
     *
     * @return string
     */
    public function getGateway()
    {
        return $this->container['gateway'];
    }

    /**
     * Sets gateway
     *
     * @param string $gateway gateway
     *
     * @return $this
     */
    public function setGateway($gateway)
    {
        $this->container['gateway'] = $gateway;

        return $this;
    }

    /**
     * Gets service
     *
     * @return string
     */
    public function getService()
    {
        return $this->container['service'];
    }

    /**
     * Sets service
     *
     * @param string $service service
     *
     * @return $this
     */
    public function setService($service)
    {
        $this->container['service'] = $service;

        return $this;
    }

    /**
     * Gets domaintag
     *
     * @return string
     */
    public function getDomaintag()
    {
        return $this->container['domaintag'];
    }

    /**
     * Sets domaintag
     *
     * @param string $domaintag domaintag
     *
     * @return $this
     */
    public function setDomaintag($domaintag)
    {
        $this->container['domaintag'] = $domaintag;

        return $this;
    }

    /**
     * Gets replacement
     *
     * @return string
     */
    public function getReplacement()
    {
        return $this->container['replacement'];
    }

    /**
     * Sets replacement
     *
     * @param string $replacement replacement
     *
     * @return $this
     */
    public function setReplacement($replacement)
    {
        $this->container['replacement'] = $replacement;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
